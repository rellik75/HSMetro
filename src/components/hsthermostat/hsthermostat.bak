/************************************ 
Device Types for Thermostats:
    Operating State=1
    Temperature=    2
    Mode_Set=       3
    Fan_Mode_Set=   4
    Fan_Status=     5
    Setpoint=       6
    RunTime=        7
    Hold_Mode=      8
    Operating_Mode= 9
    Root=           99
*************************************/

/************************************ 
Device Setpoint SubTypes for Thermostats:
    Heating=        1
    Cooling=        2
    Furance=        7
    Auto_Change=    10
    EnergySave Heat=11
    EnergySave Cool=12   
*************************************/

/************************************
Device Temp SubTypes for Thermostats:
    Temperature=    0
    Temperature=    1
    Humidity=       5      
*************************************/

define(['jquery', 'knockout', 'devicecontroller', 'config', 'text!./hsthermostat.html', 'underscore', 'faye'], function ($, ko, controller, config, templateMarkup) {

    function Hsthermostat(params) {
        var self = this;
        var refreshInterval = 300000 //time is in milliseconds.  Currently set to 5 minutes
        var unit = "";
        var proxyPort = config.proxyPort;
        var proxyIP = config.proxyIP;
        var HEATING_MODE=1;
        var COOLING_MODE=2;
        var AUTO_CHANGE_OVER_MODE=3;
        var ESH_MODE=11;
        var OFF=0;
        
        

        self.url = config.url;

        self.ref = params.ref;
        self.setPointControlRef = "";
        self.coolSetPointControlRef = "";
        self.heatSetPointControlRef = "";
        self.ESHSetpointControlRef = "";
        self.modeControlRef = "";
        self.currentModeValue="";
        self.ambientControlRef="";
        self.humidityControlRef="";
        
        //self.controlModeValue="";


        self.classInfo = ko.observable();
        if (params.hasOwnProperty("width")) {
            self.defaultWidth = params.width;
        } else self.defaultWidth = "one-wide two-tall";
        if (params.hasOwnProperty("color")) {
            self.defaultColor = params.color;
        } else self.defaultColor = "steel";

        self.classInfo("live-tile exclude accent " + self.defaultColor + " " + self.defaultWidth);


        self.statusIcon = ko.observable();
        self.device = ko.observable();
        self.children = ko.observableArray();
        self.ambientTemp = ko.observable();
        self.mode = ko.observable();
        self.modeValue = ko.observable();
        self.humidity = ko.observable();
        self.coolSetPoint = ko.observable();
        self.heatSetPoint = ko.observable();
        self.ESHSetPoint = ko.observable();
        self.status = ko.observable();
        self.fanStatus = ko.observable();
        self.modeIcon = ko.observable();
        self.humidityIsVisible = ko.observable(false);
        self.pendingIsVisible = ko.observable(false);
        self.controlButtonsAreVisible = ko.observable(true);
        self.setPointIsVisible = ko.observable(true);
        self.pendingModeValue=ko.observable(null);
        self.setpoint = ko.pureComputed({
            read: function () {
                if (self.pendingModeValue()==null) {
                    if (self.modeValue() == HEATING_MODE) {
                        return self.heatSetPoint();
                    } else if (self.modeValue() == ESH_MODE) {
                        return self.ESHSetPoint();
                    } else if (self.modeValue() == COOLING_MODE) {
                        return self.coolSetPoint();
                    }
                    else return self.heatSetPoint();
                }
                else {
                    if (self.pendingModeValue() == HEATING_MODE) {
                        return self.heatSetPoint();
                    } else if (self.pendingModeValue() == ESH_MODE) {
                        return self.ESHSetPoint();
                    } else if (self.pendingModeValue() == COOLING_MODE) {
                        return self.coolSetPoint();
                    }
                    else return self.heatSetPoint();             
                }
            },
            write: function (value) {
                if (self.modeValue() == HEATING_MODE) {
                    self.heatSetPoint(value);
                } else if (self.modeValue() == ESH_MODE) {
                    self.ESHSetPoint(value);
                } else if (self.modeValue() == COOLING_MODE) {
                    self.coolSetPoint(value);
                }
                    else self.heatSetPoint(value);
            }
        });

        self.setStatusIcon = function () {
            var status = self.status();

            var _classInfo = "live-tile exclude " + self.defaultWidth;
            if (status == 2 || status == 12) {
                self.classInfo(_classInfo + " accent blue");
            } else if (status == 1 || status == 11 || status == 7) {
                self.classInfo(_classInfo + " accent orange");
            } else {
                self.classInfo(_classInfo + " accent " + self.defaultColor);
            }
        }



        self.rangeUp = function (device, event) {
            event.stopPropagation();
            self.pendingIsVisible(true);
            if (self.timer != null) {
                clearTimeout(self.timer);
                self.timer = null;
            }
            var currentVal = String(self.setpoint()).substr(0, 2);

            if (self.modeValue() == HEATING_MODE) {
                self.setPointControlRef = self.heatSetPointControlRef;
            }
            else if (self.modeValue() == COOLING_MODE) {
                self.setPointControlRef = self.coolSetPointControlRef;
            }
            else if (self.modeValue() == ESH_MODE) {
                self.setPointControlRef = self.ESHSetpointControlRef;
            }
            else {
                self.setPointControlRef = self.heatSetPointControlRef;
            }
            if ((unit == "F" && currentVal < 98) || (unit == "C" && currentVal < 90)) {
                currentVal++;
                self.setpoint(currentVal + "\xB0" + unit);
            }
            self.timer = setTimeout(controller.control, 3000, {
                "ref": self.setPointControlRef,
                "url": self.url,
                "value": currentVal
            });
        };

        self.rangeDown = function (device, event) {
            //if (event.target.id="down"){}
            event.stopPropagation();
            self.pendingIsVisible(true);
            if (self.timer != null) {
                clearTimeout(self.timer);
                self.timer = null;
            }
            var currentVal = String(self.setpoint()).substr(0, 2);
            console.log("Current Mode = " + self.mode());
            if (self.modeValue() == HEATING_MODE) {
                self.setPointControlRef = self.heatSetPointControlRef;
            }
            else if (self.modeValue() == COOLING_MODE) {
                self.setPointControlRef = self.coolSetPointControlRef;
                console.log("Updating setPointControlRef to " + self.setPointControlRef);
            }
            else if (self.modeValue() == ESH_MODE) {
                self.setPointControlRef = self.ESHSetpointControlRef;
            }
            else {
                console.log("No mode specified. Using Heat setpoint.  Updating setPointControlRef to " + self.setPointControlRef);
                self.setPointControlRef = self.heatSetPointControlRef;
            }

            if ((unit == "F" && currentVal > 60) || (unit == "C" && currentVal > 10)) {
                currentVal--;
                self.setpoint(currentVal + "\xB0" + unit);
            }
            self.timer = setTimeout(controller.control, 3000, {
                "ref": self.setPointControlRef,
                "url": self.url,
                "value": currentVal
            });
        };

        //FUNCTION toggleDevice
        self.toggleDevice = function (params) {
            if (self.timer != null) {
                clearTimeout(self.timer);
                self.timer = null;
            }
            self.currentModeValue=self.modeValue();
            console.log ("Current Mode Value = " + self.currentModeValue);
            
            //Find the current Mode value in the array of ControlPairs
            var o = _.find(self.device().controlPairs(), function (item) {
                return item.Label == self.mode();
            });

            //Get the index value of the current Mode value in the array of ControlPairs and then increment to move
            //to the next label in the array.  If we reach the end of the array, set the index to 0 and start over
            var i = _.indexOf(self.device().controlPairs(), o);
            ++i;
            if (i >= _.size(self.device().controlPairs())) {
                i = 0;
            }
            //debugger;
            if (_.size(self.device().controlPairs()) > 0) {
                
                try {
                    var label = self.device().controlPairs()[i].Label;
                    //self.modeValue(self.device().controlPairs()[i].ControlValue);
                    self.pendingModeValue(self.device().controlPairs()[i].ControlValue);
                    self.mode(label);
                    //Mode is Cool
                    if (self.pendingModeValue() == COOLING_MODE) {
                        self.modeIcon("img/cool.png");
                        self.setPointControlRef = self.coolSetPointControlRef;
                    }
                    //Mode is Heat
                    if (self.pendingModeValue() == HEATING_MODE) {
                        //debugger;
                        self.modeIcon("img/heat.png");
                        self.setPointControlRef = self.heatSetPointControlRef;
                    }
                    //Mode is Auto Change
                    if (self.pendingModeValue() == AUTO_CHANGE_OVER_MODE) {
                        self.modeIcon("img/heat-cool.png");
                    }
                    //Mode is Energy Save Heat
                    if (self.pendingModeValue() == ESH_MODE) {
                        self.modeIcon("img/energy_save.png");
                        self.setPointControlRef = self.ESHSetpointControlRef;
                    }
                    //Mode is Off
                    if (self.pendingModeValue() == OFF) {
                        self.modeIcon("img/on_off.png");
                    }
                    self.timer = setTimeout(controlThermostat, 3000, {
                        "ref": self.modeControlRef,
                        "url": self.url,
                        "value": self.pendingModeValue()
                    });

                } catch (error) {
                    console.log("Error attempting to toggle device modes.  Most likely this thermostat only has one mode.")
                }
            }
        }

        var controlThermostat = function (params) {
            self.pendingIsVisible(true);
            console.log("Pending Mode Value = " +params.value);
            //self.modeValue(params.value);
            $.when(controller.control(params)).done(function (data) {
                queryThermostat();
                
            });;
        }

        //FUNCTION queryThermostat
        var queryThermostat = function () {
            $.when(controller.query({
                "url": self.url,
                "ref": self.ref,
                "isParent": true
            })).done(function (data) {
                self.device(data);
                if (self.device().statusLabel() == "Offline") {
                    self.controlButtonsAreVisible(false);
                    self.setPointIsVisible(false);
                } else {
                    self.controlButtonsAreVisible(true);
                    self.setPointIsVisible(true);
                }
                _.each(self.device().children, function (item) {
                    queryChild(item);

                });

            });
        }

        //FUNCTION queryChild
        var queryChild = function (item) {
            var query = {};
            query.url = self.url;
            query.ref = item;
            $.when(controller.query(query)).done(function (data) {
                self.children.push(data);
                //debugger;
                if (data.deviceType == 2 && (data.deviceSubType == 0 || data.deviceSubType == 1)) {
                    self.ambientTemp(data.statusLabel());
                    self.ambientControlRef=data.ref();
                }
                if (data.deviceType == 1) {
                    self.status(data.statusLabel());
                }
                if ((data.deviceType == 2 || data.deviceType == 999) && (data.deviceSubType == 5 || data.deviceSubType == 0)) {
                    self.humidity(data.statusLabel());
                    self.humidityIsVisible(true);
                    self.humidityControlRef=data.ref();
                }
                if (data.deviceType == 3 || data.deviceType == 9) {
                    //debugger;
                    self.mode(data.statusLabel());
                    self.modeValue(data.value());
                    console.log("HS Mode Value = " + self.modeValue());
                    ko.utils.arrayPushAll(self.device().controlPairs(), data.controlPairs());
                    self.modeControlRef = data.ref();
                    
                    if (self.pendingModeValue()==null) {
                        //debugger;
                        if (self.modeValue() == COOLING_MODE) {
                            self.modeIcon("img/cool.png");
                        }
                        else if (self.modeValue() == HEATING_MODE) {
                            self.modeIcon("img/heat.png");
                        } else if (self.modeValue() == ESH_MODE ) {
                            self.modeIcon("img/energy_save.png");
                        }
                        else if (self.modeValue() == AUTO_CHANGE_OVER_MODE) {
                            self.modeIcon("img/heat-cool.png");
                        }
                        else if (self.modeValue() == OFF) {
                            self.modeIcon("img/on_off.png");
                            self.controlButtonsAreVisible(false);
                            self.setPointIsVisible(false);
                        } else {
                            self.controlButtonsAreVisible(true);
                            self.setPointIsVisible(true);
                        }
                    }
                    else {
                        if (self.pendingModeValue() == COOLING_MODE) {
                            //debugger;
                            self.modeIcon("img/cool.png");
                        }
                        else if (self.pendingModeValue() == HEATING_MODE) {
                            self.modeIcon("img/heat.png");
                        } else if (self.pendingModeValue == ESH_MODE ) {
                            self.modeIcon("img/energy_save.png");
                        }
                        else if (self.pendingModeValue() == AUTO_CHANGE_OVER_MODE) {
                            self.modeIcon("img/heat-cool.png");
                        }
                        else if (self.pendingModeValue() == OFF) {
                            self.modeIcon("img/on_off.png");
                            self.controlButtonsAreVisible(false);
                            self.setPointIsVisible(false);
                        }      
                        //self.pendingModeValue(null);                      
                    }                   
                }
                if (data.deviceType == 6) {
                    unit = String(data.statusLabel().substr(-1, 1));
                    // self.device().value(data.value());
                    if (data.deviceSubType == 1) {
                        //Setpoint RefID for Heating Child
                        self.heatSetPointControlRef = data.ref();
                        self.heatSetPoint(data.statusLabel().substr(0, 2) + "\xB0" + unit);
                        console.log("Heat setpoint ref= " + data.ref());
                        console.log("Heat setpoint = " + data.statusLabel().substr(0, 2) + "\xB0" + unit);
                    } else if (data.deviceSubType == 11) {
                        //Setpoint REFID for Energy Save Heat Child
                        self.ESHSetpointControlRef = data.ref();
                        self.ESHSetPoint(data.statusLabel().substr(0, 2) + "\xB0" + unit);
                        console.log("Energy Save Heat setpoint ref= " + data.ref());
                    } else if (data.deviceSubType == 2) {
                        //Setpoint RefID for Cooling Child
                        self.coolSetPointControlRef = data.ref();
                        self.coolSetPoint(data.statusLabel().substr(0, 2) + "\xB0" + unit);
                        console.log("Cool setpoint ref= " + data.ref());
                        console.log("Cool setpoint = " + data.statusLabel().substr(0, 2) + "\xB0" + unit);
                    }

                }
                if (data.deviceType == 4 || data.deviceType == 5) {
                    self.fanStatus(data.statusLabel());
                }

                if (data.deviceType == 0 && data.deviceSubType == 128) {
                    //**BATTERY**//

                }
                if (data.deviceType == 0 && data.deviceSubType == 38) {
                    //**MULTI-LEVEL SWITCH**//

                }


            });
        }

        queryThermostat();

        //FUNCTION subscribeToProxy
        var subscribeToProxy = function () {
            var proxyURL = "http://" + proxyIP + ":" + proxyPort + "/faye";
            var client = new Faye.Client(proxyURL);
            client.subscribe('/homeseer/statuschange', function (message) {
                var arr = String(message).split(",");
                var refID = parseInt(arr[1]);
                console.log("Proxy Broadcast message received for device: " + arr[1]);
                //debugger;
                if (refID == self.coolSetPointControlRef || refID == self.heatSetPointControlRef || 
                    refID == self.ESHSetpointControlRef || refID == self.modeControlRef || 
                    refID==self.ambientControlRef || refID==self.humidityControlRef) {
                    console.log("Proxy Broadcast match--doing query");
                    queryChild(refID);
                    self.pendingIsVisible(false);
                    // }

                };
            });
        }

        // Check to ensure proxy IP and port values are set.  ThenCreate a new client that subscribes 
        // to the proxy server.  Convert the message to an array
        // and check to ensure the current value isn't equal to the value received from the proxy.
        // If the the value received from the proxy is different then call the function to control the device
        //debugger;
        if (proxyIP && proxyPort) {
            subscribeToProxy();
        }

    }


    // This runs when the component is torn down. Put here any logic necessary to clean up,
    // for example cancelling setTimeouts or disposing Knockout subscriptions/computeds.
    Hsthermostat.prototype.dispose = function () {};

    return {
        viewModel: Hsthermostat,
        template: templateMarkup
    };


});